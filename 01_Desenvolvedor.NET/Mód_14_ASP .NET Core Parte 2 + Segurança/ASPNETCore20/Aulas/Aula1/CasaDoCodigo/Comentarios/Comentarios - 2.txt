
-- ASP.NET Core parte 2: Um e-Commerce com MVC e EF Core -----------------------

-- 01_A02 - Introdução ----------------------------------------------

Olá!

Sou Marcelo Oliveira, bem-vindo ao curso Asp.NET Core 2.0 parte II da Alura. Nesse curso, continuaremos incrementando o e-commerce do nosso cliente "Casa do Código" com a ajuda dos recursos do Asp.NET Core 2.0. Começaremos implementando o clique dos botões "+" e "-" do carrinho de compras, para adicionar ou remover itens.

Dois livros à venda e ícones de "+" e "-" ao lado que cada um deles 

Essa implementação irá nos proporcionar muitos conhecimentos novos, por exemplo, chamar uma função JavaScript pelo evento do clique no clique do HTML. Selecionaremos elementos do HTML por meio do plug-in do Jquery. Aprenderemos a diferença entre uma requisição com método post() e get(). Veremos como realizar uma requisição através do método httppost(), com a ajuda da função ajax() do Jquery.

Aprenderemos a organizar melhor nosso código por meio de uma classe do JavaScript, e começaremos a lidar com o evento de digitação da quantidade de elementos no carrinho de compras.

Ainda, prepararemos no servidor o recebimento da função ajax() pelo controller, em segida guardaremos as informações no banco de dados. Aprenderemos a implementar um padrão chamado view model, isto é, um modelo específico para fornecer informações para a <view>. Retornaremos um objeto específico para a requisição ajax(), e por meio da resposta obtida atualizaremos toda a <view>.

Posteriormente, trabalharemos com os campos de cadastro. Aprenderemos a redirecionar o usuário para outra action caso tenhamos algum problema de validação nos campos, assim garantimos que todos eles estejam preenchidos e com dados corretos, pois criaremos validações customizadas para cada item.

campos de cadastro - serie de campos a serem preenchidos pelo usuário, são eles "Nome do Cliente", "Email", "Telefone", "Endereço", "Complemento", "Bairro", "Município", "UF" e "CEP".
Criaremos um formulário no Razor por meio de uma TagHelper. Pegaremos a informação que foi enviada para o servidor e gravar no banco de dados, e depois veremos como proteger nossa action contra acessos indevidos utilizando o recurso de validação do tolken. Iremos aprender a proteger o método que receberá a chamada ajax() contra acessos maliciosos.

Finalmente, renderizaremos a <view> de resumo com os dados de cadastro do usuário.

Espero que vocês gostem do curso e não deixem de participar do fórum!

Vamos lá?!

-- 01_A03 - Chamando Função JavaScript a Partir de um evento HTML -------------

Usaremos o mesmo projeto iniciado no curso Asp.NET Core 2.0 parte I, portanto copiaremos esse arquivo e o utilizaremos na segunda etapa do curso. Havíamos criado um banco de dados na primeira parte do curso, mas ele será apagado nesta etapa. No Visual Studio, clicaremos sobre "Exibir" no cabeçalho de ferramentas, e selecionaremos a opção "Pesquisador de Objetos no SQL Server". Assim, localizaremos o banco de dados CasaDoCodigo e o excluiremos. Basta clicar sobre ele com o botão direito e selecionar a opção "Excluir".

deletando banco de dados

Deletamos esse banco de dados porque nós fizemos uma cópia do arquivo e trocamos o nome do name space, isso pode gerar problemas no momento em que precisarmos trabalhar com o banco.

Depois que deletamos o banco de dados iremos executar a aplicação.A aplicação rodará no browser ,e teremos o catálogo de livros da Casa do Código e a opção de adiciona-los ao carrinho de compras por via do botão "Adicionar". Na primeira opção apresentada, o livro "ASP.NET Core MVC", clicaremos sobre o botão "Adicionar".

Capa de livro de programação, com a opção "Adicionar" localizada logo abaixo

Adicionaremos mais alguns livros diferentes no carrinho. Ao realizarmos essa ação, somos direcionados para a página que exibe todos os itens que estamos comprando. Contudo, temos a opção de "Quantidade" de livros, e esta não pode ser alterada diretamente ao clicarmos no botão "+", ficando sempre com o valor 1 fixo.

 página que exibe todos os livros que estão no carrinho. Temos dois títulos diferentes, sendo eles "PstgreSQL" e "APS.NET Core MVC" e três colunas: "Preço Unitário, "Quantidade" e "Subtotal". Na coluna "Quantidade" há um ícone que possibilita ao usuário aumentar o número de itens no carrinho por meio dos botões "+" e "-"
Nosso objetivo é fazer com que a aplicação responda ao clique no botão "+" para podermos aumentar as quantidades de itens no carrinho.

Até o momento trabalhamos com o código apenas do lado do servidor, o chamado Server Side. Neste ponto do curso, iremos fazer uma implementação do lado do cliente, utilizaremos a linguagem JavaScript, que somente pode ser executada o browser.

Abriremos novamente o Visual Studio e acessaremos a view de carrinho. Na área de gerenciamento de soluções, clicaremos sobre "Views > Carrinho.cshtml".

arquivo dentro da pasta view
Iremos até o final da view e inseriremos o código JavaScript que será executado do browser. Não podemos simplesmente adicionar o script no código , primeiramente precisamos adicionar a tag <script> que por sua vez necessita de um tipo (type), no caso, text/javascript

@{
    ViewData["Title"] = "Carrinho";
}

<div class="row">
    <div class="col-md-12">
        <div class="pull-right">
            <a class="btn btn-success" asp-action="carrossel">
                Adicionar Produtos
            </a>
            <a class="btn btn-success" asp-action="resumo">
                Finalizar Pedido
            </a>
        </div>
    </div>
</div>

<script type="text/javascript">

</script> 
Dentro dessa tag iremos inserir o código JavaSript. Porém, há um detalhe: não podemos inserir uma tag <script> dentro de uma view do Razor, como é o casso de Carrinho.cshtml. Precisamos criar uma sessão para incluir esse script, para isso, deveremos criar uma diretiva @section que terá o nome de Scripts. Essa sessão terá duas chaves, e dentro delas inseriremos a tag <script>.

@{
    ViewData["Title"] = "Carrinho";
}

<div class="row">
    <div class="col-md-12">
        <div class="pull-right">
            <a class="btn btn-success" asp-action="carrossel">
                Adicionar Produtos
            </a>
            <a class="btn btn-success" asp-action="resumo">
                Finalizar Pedido
            </a>
        </div>
    </div>
</div>

@section Scripts
{

    <script type="text/javascript">

    </script> 
}

Com isso, podemos realmente começar a escrever nosso código JavaScript.

O objeto é fazer com que aplicação responde ao clique do usuário no botão "+", tal responde deve ser criada por meio de uma função (function), que terá o nome de clickIncremento().

@{
    ViewData["Title"] = "Carrinho";
}


@section Scripts
{

    <script type="text/javascript">
        function clickIncremento(){

        }

    </script> 
}
Iremos até o trecho de código responsável pelo botão "+" na view, que é button class="btn btn-default".

@{
    ViewData["Title"] = "Carrinho";
}

 @foreach (var item in Model)
        {

            <div class="row row-center linha-produto">
                <div class="col-md-3">
                    <img class="img-produto-carrinho" src="/images/produtos/large_@(item.Produto.Codigo).jpg" />
                </div>
                <div class="col-md-3">@(item.Produto.Nome)</div>
                <div class="col-md-2 text-center">R$ @(item.PrecoUnitario)</div>
                <div class="col-md-2 text-center">
                    <div class="input-group">
                        <span class="input-group-btn">
                            <button class="btn btn-default">
                                <span class="glyphicon-minus"></span>
                            </button>
                        </span>
                        <input type="text" value="@(item.Quantidade)"
                               class="form-control text-center" />
                        <span class="input-group-btn">
                            <button class="btn btn-default">
                                <span class="glyphicon-plus"></span>
                            </button>
                        </span>
                    </div>
                </div>
                <div class="col-md-2">
                    R$ <span class="pull-right" subtotal>
                        @(item.Quantidade * item.PrecoUnitario)
                    </span>
                </div>
            </div>

        }
Adicionaremos um atributo ao elemento <button> para o evento do click. Esse atributo é chamado de onclick, e ele receberá a função JavaScript que acabamos de criar, a clickIncremento().

@{
    ViewData["Title"] = "Carrinho";
}

                <button class="btn btn-default">
                    onclick="clickIncremento()">
                                <span class="glyphicon-plus"></span>
                            </button>
Voltaremos ao browser a atualizaremos a página utilizando o atalho "Ctrl + F5" e testaremos se a nossa modificação foi bem sucedida. Ao clicaremos sobre o botão de "+" veremos que nenhuma ação é realizada. Isso ocorre porque não solicitamos nenhuma ação, nós iremos inserir um break point no código JavaScript da view. Inseriremos o comando debugger.

@{
    ViewData["Title"] = "Carrinho";
}

@section Scripts
{

    <script type="text/javascript">
        function clickIncremento(){
            debugger;
        }

    </script> 
}
Ao testarmos novamente o botão "+", notaremos que nada ocorre. Para que o comando debugger funcione, devemos entrar nas ferramentas do desenvolvedor utilizando o atalho "F12" no browser. Uma nova área irá surgir na parte inferior da tela. Clicaremos no botão "+" e teremos acesso ao seguinte trecho de código:

<script type="text/javascript">
    function clickIncremento() { 
        debugger;
    }
</script>

</body>
</html>
Estamos parados da linha do comando debugger. Veremos nas próximas aulas como implementar o código JavaScript em nossa aplicação.

-- 01_A04 - Usando Filtros jQuery Para Acessar Elementos --------------

Realizamos o primeiro teste de interação entre o usuário e botão "+", que por sua vez chama função JavaScript por meio do evento onclick, entenderemos o porquê devemos sempre inserir o script dentro de uma view do Asp.NET Core dentro de uma sessão de Script.

@{
    ViewData["Title"] = "Carrinho";
}


@section Scripts
{ 

    <script type="text/javascript">
        function clickIncremento() {
            debugger;
        }
    </script>
}
Voltemos até o browser, na página de carrinho que exibe todos os itens que compramos. Iremos analisar o código html gerado da página, para isso, basta clicar com o botão direito do mouse e selecionar a opção "Exibir código fonte da página" ou pressionar o atalho "Ctrl + U". Ao final do código, veremos a função clickIncremento() inserida. Temos os botõesAdicionar Produtos e Finalizar Pedido,em seguida temos o rodapé da nossa página que foi gerado pelo layout.cshtml, a view que envolve todo o código html. Dois, temos os scripts utilizados na página, e ao final teremos o script específico para nossa página.

<!DOCTYPE html> 

<****!****>


<div class="row">
    <div class="col-md-12">
        <div class="pull-right">
            <a class="btn btn-success" asp-action="carrossel">
                Adicionar Produtos
            </a>
            <a class="btn btn-success" asp-action="resumo">
                Finalizar Pedido
            </a>
        </div>
    </div>
</div>

        <hr />
        <footer>
            <p>&copy; 2018 - Casa do Código</p>
        </footer>
    </div>

        <script src="/lib/jquery/dist/jquery.js"></script>
        <script src="/lib/jquery-validation/dist/jquery.validade.js"></script> 
        <script src="/lib/jquery-validation-
unobtrusive/jquery.validade.unobtrusive.js"></script> 
        <script src="/lib/bootstrap/dist/js/bootstrap.js"></script> 
        <script src"/js/site.js?v=8ZRc1sGeVrPBx41D717BgRaQeKyh78QKV9SKsdt638U">
</script> 

    <script type="text/javascript">
        function clickIncremento() {
            debugger;
        }
    </script>
}

</body>
</html>
O que Asp.Net Core faz é lançar a tag de script para o final da página, caso a ordem fosse outra, seria, executados os outros scripts principais da aplicação, e isso geraria uma série de erros e teremos dependências que ainda não forma executadas. Por isso é muito importante inserir o código JavaScript dentro de uma sessão.

De volta ao código html da página, notaremos os itens do carrinho que são exibidos como uma série de <div>s e <span>s, e não mencionam exatamente quais são os itens que estamos trabalhando.

<!DOCTYPE html> 

<****!****>

<div class="col-md-3">PostgreeSQL</div>
<div class="col-md-2 text-center">R$ 49,90</div> 
<div class="col-md-w text-center">
    <div class="input-group">
        <span class="input-group-btn">
            <button class="btn btn-default">
                <span class='glyphicon-minus"></span>
            </button> 

<****!****>
A única informação que possuímos é o nome, no caso PostgreeSQL, mas isso não é relevante. O que precisamos saber é qual o item que foi clicado no botão "+". Para identificarmos cada um dos itens iremos colocar dentro de um elemento <div> um atributo com o identificador de cada item.

Na view Carrinho.cshmtl localizaremos a <div> que envolve cada um dos itens. Essa <div> possui a classe linha produto.

@{
    ViewData["Title"] = "Carrinho";
}


@foreach (var item in Model)
        {

            <div class="row row-center linha-produto">
                <div class="col-md-3">
                    <img class="img-produto-carrinho" src="/images/produtos/large_@(item.Produto.Codigo).jpg" />
                </div>

<****!****>
Adicionaremos outro atributo, que chamaremos de item-id, que será igual ao id do item pedido. Inseriremos, portanto, `@item.Id`.

@{
    ViewData["Title"] = "Carrinho";
}


@foreach (var item in Model)
        {

            <div class="row row-center linha-produto" item-id="@item.Id">
                <div class="col-md-3">
                    <img class="img-produto-carrinho" src="/images/produtos/large_@(item.Produto.Codigo).jpg" />
                </div>

<****!****>
Desse modo estamos inserido um código que será obtido do banco de dados, ou seja, estamos lançando uso do Razor para que ele renderize o número de identificação do item correspondente.

Salvaremos as modificações realizadas, atualizaremos a página e novamente iremos verificar o código fonte. Notaremos a presença do novo atributo item-id.

<!DOCTYPE html> 

<****!****>

            <div class="row row center linha-produto" item-id"8">
                <div class="col-md-3">
Na view Carrinho.cshtml passaremos o item-id para o código JavaScript, de forma que esse item possa ser trabalhado e o servidor possa receber a informação e atualizar a quantidade de itens no carrinho. No evento onclick teremos a função clickIncremento(), para esta passaremos o contexto por meio da palavra this,.

@{
    ViewData["Title"] = "Carrinho";
}

                        <input type="text" value="@(item.Quantidade)"
                               class="form-control text-center" />
                        <span class="input-group-btn">
                            <button class="btn btn-default">
                                                            onclick="clickIncremento(this)">
                                <span class="glyphicon-plus"></span>
                            </button>
                        </span>
Além disso, devemos modificar a assinatura da função JavaScript, passando para clickIncremento() um parâmetro btn, isto é, o botão que foi clicado pelo usuário. Em seguida, removeremos o comando debugger.

@{
    ViewData["Title"] = "Carrinho";
}

@section Scripts
{ 

    <script type="text/javascript">
        function clickIncremento(btn) {

        }
    </script>
}
Para acessarmos o atributo id a partir desse elemento, usaremos a biblioteca jQuery, que é um componetente que acompanha a instalação do Asp.NET Core. O jQuery fornece diversas ferramentas que são úteis para, por exemplo, fazer requisições ao servidor. Inseriremos o caractere $ e passaremos o elemento a ser manipulado, no caso trata-se do btn.

@{
    ViewData["Title"] = "Carrinho";
}

@section Scripts
{ 

    <script type="text/javascript">
        function clickIncremento(btn) {
            $(btn)
        }
    </script>
}
E seguida, acessaremos a função attr , uma das várias disponibilizadas pelo jQuery, e ela receberá o nome do atributo que desejamos trabalhar, ou seja, item-id. Todos esses valores serão atribuídos a uma variável que chamaremos de idemId. Finalmente, adicionaremos novamente o comando debugger.

@{
    ViewData["Title"] = "Carrinho";
}

@section Scripts
{ 

    <script type="text/javascript">
        function clickIncremento(btn) {
            var itemId = $(btn).attr('item-id');
            debugger;        
        }
    </script>
}
Atualizaremos a página no browser, abriremos o código fonte e clicaremos sobre o botão "+". Nos atentaremos ao seguinte trecho do código:

<!DOCTYPE html> 

<****!****>

    <script type="text/javascript">
        function clickIncremento(btn) { btn = button.btn.btn-default
            var itemI = $(btn).attr('item-id'); itemId = undefined
            debugger;
        }
    </script>

</body>
</html> 
Note que o valor trazido é indefinido (undefinded), não foi possível encontrar o atributo item-id. O que fizemos foi clicar no botão, mas não é no botão que está o atributo.

Ao analisarmos o código fonte mais detalhadamente, perceberemos que o atributoitem-id foi armazenado em uma <div>, e mais abaixo no código teremos a função clickIncremento(), e <button class="btn btn-default> foi passado como evento onclick. Porém, ao analisarmos a estrutura do código hmtl perceberemos que item-id está bem acima.

<!DOCTYPE html> 

<****!****>

<div class="row row-center linha-produto"item-id="8">
                <div class="col-md-3">
                    <img class="img-produto-carrinho" src="/images/produtos/large_036.jpg" />
                </div>
                <div class="col-md-3">@Business Intelligence</div>
                <div class="col-md-2 text-center">R$ 49,90</div>
                <div class="col-md-2 text-center">
                    <div class="input-group">
                        <span class="input-group-btn">
                            <button class="btn btn-default">
                                <span class="glyphicon-minus"></span>
                            </button>
                        </span>
                        <input type="text" value="1"
                               class="form-control text-center" />
                        <span class="input-group-btn">
                            <button class="btn btn-default">
                                                            onclick="clickIncremento(this)">
                                <span class="glyphicon-plus"></span>
                            </button>

<****!****>
Nas próximas aulas veremos como localizar o item-id="8" por meio da hierarquia de elementos html por funções do jQuery.

-- 01_A05 - Navegando Pela Hierarquia de Elementos --------------

Nesta aula, acessaremos uma série de funções do jQuery, para isso, exibiremos a anatomia de uma função dessa biblioteca.

$(seletor).action();
Primeiramente, começamos utilizando o cifrão $, que denota as funções. Em seguida, colocamos entre parênteses () o seletor, isto é, o que fará a seleção de um elemento ou coleção html. O seltor pode ser o próprio elemento, um id, o nome do elemento ou até a classe CSS, em suma, existem várias formas de utilizar um seletor. Posteriormente teremos um ponto ., que atua como separador, e finalmente tempos o nome da função que será executada para retornar um ou mais elementos selecionados.

Voltemos ao código JavaScript em que queremos obter o id por meio de um botão.

@{
    ViewData["Title"] = "Carrinho";
}

<****!****>

@section Scrips
{
    <script type="text/javascript">
        function clickIncremento(btn) { 
            var itemId = $(btn).attr('item-id');
            debugger;
        }
    </script>
Como averiguamos, a nossa tarefa não é possível, pois item-id não está no botão e, sim, em uma <div> que está mais acima na hierarquia de elementos html. Revisitaremos o código para entender a posição dos elementos na hierarquia. item-id está em <div class="row row-center linha-produto">, que possui uma classe css linha-produto. Enquanto o botão está em <button class="btn btn-default">.

@{
    ViewData["Title"] = "Carrinho";
}

<div class="row row-center linha-produto">
                <div class="col-md-3">
                    <img class="img-produto-carrinho" src="/images/produtos/large_@(item.Produto.Codigo).jpg" />
                </div>
                <div class="col-md-3">@(item.Produto.Nome)</div>
                <div class="col-md-2 text-center">R$ @(item.PrecoUnitario)</div>
                <div class="col-md-2 text-center">
                    <div class="input-group">
                        <span class="input-group-btn">
                            <button class="btn btn-default">
                                <span class="glyphicon-minus"></span>
                            </button>
                        </span>
                                            </div>
Precisamos navegar acima da hierarquia e utilizaremos o jQuery para fazer isso. De volta a view, iremos declarar uma variável(linhaDoItem) que armazenará a linha do item, ou seja, a linha <div> do html que citamos. Para chegarmos até essa <div>, a partir do botão navegaremos para cima do código utilizando a função parents(). Essa navegação será filtrada, ou seja, só leremos os pais que contém o atributo item-id, logo adicionaremos à parents() o filtro de atributo [item-id].

@{
    ViewData["Title"] = "Carrinho";
}

<****!****>

@section Scrips
{
    <script type="text/javascript">
        function clickIncremento(btn) { 
            var linhaDoItem = $(btn).parents('[item-id]');
            var itemId = $(linhaDoItem).attr('item-id');
            debugger;
        }
    </script>
Além de obter item-id, queremos a quantidade atual do item que será alterado. Vamos localizar onde essa informação está no código:

@{
    ViewData["Title"] = "Carrinho";
}

<div class="row row-center linha-produto">
                <div class="col-md-3">
                    <img class="img-produto-carrinho" src="/images/produtos/large_@(item.Produto.Codigo).jpg" />
                </div>
                <div class="col-md-3">@(item.Produto.Nome)</div>
                <div class="col-md-2 text-center">R$ @(item.PrecoUnitario)</div>
                <div class="col-md-2 text-center">
                    <div class="input-group">
                        <span class="input-group-btn">
                            <button class="btn btn-default">
                                <span class="glyphicon-minus"></span>
                            </button>
                        </span>
                                            </div>
A caixa de texto que contém a quantidade de dados está no elemento <input type="text" value="@(item.Quantidade)", mais especificamente no atributo value.

Precisamos coletar esse valor no código JavaScript: declararemos uma nova variável que chamaremos de novaQtde, que armazenará linhaDoItem e a função find() que pegará os elementos que estão abaixo da hierarquia. Pata find(), usaremos um filtro input, afinal queremos apenas coletar a caixa de texto.

@{
    ViewData["Title"] = "Carrinho";
}

<****!****>

@section Scrips
{
    <script type="text/javascript">
        function clickIncremento(btn) { 
            var linhaDoItem = $(btn).parents('[item-id]');
            var itemId = $(linhaDoItem).attr('item-id');
            var novaQtde = $(linhaDoItem).find('input');
            debugger;
        }
    </script>
Depois que coletamos o input, precisamos acessar seu valor valor. O jQuery possui uma função especial para acessar valores de um input, trata-se da val().

@{
    ViewData["Title"] = "Carrinho";
}

<****!****>

@section Scrips
{
    <script type="text/javascript">
        function clickIncremento(btn) { 
            var linhaDoItem = $(btn).parents('[item-id]');
            var itemId = $(linhaDoItem).attr('item-id');
            var novaQtde = $(linhaDoItem).find('input').val();
            debugger;
        }
    </script>
Feitas todas as modificações, salvaremos os conteúdos e atualizaremos a página no browser. Clicaremos novamente sobre o botão "+" e analisaremos o código fonte para entendermos como ele está operando.

A aplicação foi finalizada em debubber. Veremos que foi encontrada na página a linhaDoItem corretamente, foi identificado o itemId = "8"e a NovaQtde = 1, a informação da caixa de texto.

<script type="text/javascript">
    function clickIncremento(btn) { btn= button.btn.btn-default 
        var linhaDoItem = $(btn).parents('[item-id]'); linhaDoItem = jQuery.fn.init [div.row.row-center.linha-produto]
        var itemId = $(linhaDoItem).attr('item-id'); itemId = "8"
        var novaQtde = $(linhaDoItem).find('input').val(); novaQtde = "1"
        debugger;
    }
Nas próximas aulas trabalharemos com o código no servidor e enviar as informações necessárias, de forma que o banco de dados possa ser atualizado.

-- 06_A06 - Obtendo elementos na hierarquia do HTML --------------------------

usando a biblioteca JavaScript JQuery.

A página de carrinho da aplicação possui um trecho contendo informações importantes sobre os itens do pedido, e você precisa obter informações nos elementos desse documento HTML.

Quais métodos jQuery você usaria para obter os elementos acima e abaixo de um determinado elemento, respectivamente? Escolha a melhor alternativa.

** parents e find

Isso mesmo! O método parents obtém os "ancestrais" (elementos acima da hierarquia) do elemento. O método find vai obter os elementos abaixo da hiearquia.

-- 01_A07 - Criando Método POST no Servidor para Receber Requisição ---------

Temos em nosso código JavaScript que obtém as informações necessárias para realizar a alteração da quantidade de itens no carrinho. Devemos passar as informações para o servidor, mas antes de fazer a requisição devemos prepara-lo para receber essa requisição.

Faremos a preparação em PedidoController.cs. Ao final do código, criaremos um novo método público, e a principio não declararemos nada. O nome desse método será UpdateQuantidade()

namespace CasaDoCodigo.Controllers
{

<****!****>

public IActionResult Resumo()
        {
            return View(pedidoRepository.GetPedido());
        }

                public void UpdateQuantidade()`
                {
                }

    }
}
O método UpdateQuantidade() irá tratar a requisição, e receberá como parâmetros um valor interio (int) de itemPedidoId e a nova quantidade de itens, que chamaremos de quantidade.

namespace CasaDoCodigo.Controllers
{

<****!****>

public IActionResult Resumo()
        {
            return View(pedidoRepository.GetPedido());
        }

                public void UpdateQuantidade(int item PedidoId, int quantidade)`
                {
                }

    }
}
Adicionaremos um break point, e faremos uma requisição diretamente no browser pela barra de endereços, dessa forma podemos testar nosso método. Na barra de endereço digitaremos:

http://localhost:50040/pedido/updatequantidade
Veremos que a aplicação parou no break point do método updatequantidade(), passando como parâmetro itemPedidoId, que é 0 e quantidade também 0, pois estes são os valores dafault já que não passamos nada para esses parâmetros.

Faremos uma nova requisição diretamente no browser, mas dessa vez passando parâmetros. Utilizaremos a ?, que marca o começo da dos parâmetros, depois inseriremos itemPedidoId e configuraremos um valor qualquer de 123. Em seguida inseriremos o segundo parâmetro quantidade de valor 7, e que será dividido do primeiro parâmetro pelo caractere &,

http://localhost:50040/pedido/updatequantidade?itempedidoid=123&quantidade=7
Conseguimos passar com sucesso os parâmetros para o método. No entanto, quando formos realizar de fato a requisição não a passaremos diretamente na query string, isto é, todo o conteúdo após a ? que contém os parâmetros da chamada.

Queremos que esses dados sejam passados no corpo da chamada. Executaremos novamente a aplicação e acessaremos o corpo do desenvolvedor pressionando o atalho "F12". Antes de fazermos a chamada para a requisição, selecionaremos a opção "Network" no browser Chrome.

abrindo network

Agora que a aba network foi selecionada, faremos a requisição novamente. Voltando ao browser, veremos a requisição registrada.

requisição updatequantidade?itempedidoid=123&quantidade=7 registrada na tela do browser Chrome 

Ao clicarmos sobre ela, teremos acesso a alguns detalhes, como sua URL e seu método, no caso, "GET".

aba exibe uma série de detalhes sobre a requisição
GET é um verbo http, isto é, uma das formas de realizar uma requisição http. Os métodos mais comuns são GET, POST, PUT, DELETE e alguns outros. O método de requisição é a maneira como ela é realizada para o servidor.

Como já havíamos dito, queremos que as informações no corpo da requisição e reforçaremos essa regra no nosso método. Ao invés de realizarmos uma requisição GET, iremos fazer uma do tipo POST, que exige que os parâmetros sejam enviados no corpo da requisição. Além disso, uma requisição da natureza http POST é ideal para realizar alterações em alguma informação do sistema, enquanto a GET é mais interessante para simplesmente obter dados.

Em PedidoController adicionaremos um atributo de método que chamaremos de HttpPost .

namespace CasaDoCodigo.Controllers
{

<****!****>

public IActionResult Resumo()
        {
            return View(pedidoRepository.GetPedido());
        }

                [HttpPost]
                public void UpdateQuantidade(int item PedidoId, int quantidade)`
                {
                }

    }
}
Ao realizarmos novamente a requisição no browser, veremos que a aplicação não conseguiu identificar uma página para responder ao endereço updatequantidade.

página não encontrada - mensagem surge na tela "Não foi possível encontrar a página deste localhost"

Nas próximas aulas veremos como fazer uma requisição com o método http POST a partir do código JavaScript.

-- 01_A08 - Ajax com jQuery ---------------------------------------------

O método UpdadeQuantidade() do PedidoController está pronto para receber requisições http POST, mas essas requisições irão enviar dados no corpo da requisição e não na url. Precisamos fazer uma adaptação nos parâmetros do método: ao invés de dois parâmetros, passaremos apenas um que será um objeto que conterá as duas informações id e quantidade.

Inseriremos uma instância da classe ItemPedido.

namespace CasaDoCodigo.Controllers
{

<****!****>

public IActionResult Resumo()
        {
            return View(pedidoRepository.GetPedido());
        }

                [HttpPost]
                public void UpdateQuantidade(itemPedido itemPedido)`
                {
                }

    }
}
ItemPedido contém tanto o id, que está em BaseModel como Quantidade, uma propriedade do ItemPedido.

public class ItemPedido: BaseModel
{ 
    [Required]
    public Pedido Pedido { get; private set; }
    [Required]
    public Produto Produto { get; private set; }
    [Required] 
    public int Quantidade {get; private set; }
    [Required]
    public decimal PrecoUnitario { get; private set; }

<****!****> 
Como iremos passar ItemPedido a partir do corpo da requisição, devemos anotar esse parâmetro com um atributo que indica sua proveniência, portanto adicionaremos FromBody.

namespace CasaDoCodigo.Controllers
{

<****!****>

public IActionResult Resumo()
        {
            return View(pedidoRepository.GetPedido());
        }

                [HttpPost]
                public void UpdateQuantidade([FromBody]itemPedido itemPedido)`
                {
                }

    }
}
Com isso, podemos voltar ao nosso código JavaScript e programar a requisição. Esse tipo de requisição utiliza uma técnica chamada ajax do jQuery, uma função que exige parâmetros.


@{
    ViewData["Title"] = "Carrinho";
}

<****!****>

@section Scrips
{
    <script type="text/javascript">
        function clickIncremento(btn) { 
            var linhaDoItem = $(btn).parents('[item-id]');
            var itemId = $(linhaDoItem).attr('idem-id');
            var novaQtde = $(linhaDoItem).find('input').val();

                        $.ajax({

                        });

                        debugger;
        }
    </script>
Passaremos paraajax as propriedades do objeto JavaScript, mas antes vamos compreender melhor esta função. Ajax é uma sigla: A*synchronous *Javascript Xml. Inicialmente tratava-se de uma técnica que utilizava o JavaScript e XML para fazer requisições a sincronizar o servidor, o que significa que o seu código não vai aguardar a resposta da requisição para continuar rodando. O XML caiu em desuso para o Ajax, e ultimamente se usa o JSON para formatação de objetos.

Para fazermos uma requisição ajax utilizando o jQuery precisaremos quatro parâmetros:

url: endereço do nosso método do controller(pedido/updatequantidade)
type: o tipo de requisição http que escolhemos (POST)
contentType: o formado dos dados (JSON)
data : o objeto que levará os dados do cliente para o servidor
Isso esclarecido, iremos inserir esses quatro parâmetros em nossa função ajax:


@{
    ViewData["Title"] = "Carrinho";
}

<****!****>

@section Scrips
{
    <script type="text/javascript">
        function clickIncremento(btn) { 
            var linhaDoItem = $(btn).parents('[item-id]');
            var itemId = $(linhaDoItem).attr('idem-id');
            var novaQtde = $(linhaDoItem).find('input').val();

                        $.ajax({
                            url:'/pedido/updatequantidade',
                            type: 'POST',
                            contentType: 'application/json',
                            data: 

                        });

                        debugger;
        }
    </script>
Antes de adicionarmos o objeto em data, iremos definir esse objeto em uma variável: ele terá a informação Id e Quantidade, essa segunda terá o conteúdo da variável novaQtdade. No entanto, não podemos utilizar o objeto sem antes transforma-lo em uma string, portanto adicionaremos JSON.stringfypara realizar essa conversão.


@{
    ViewData["Title"] = "Carrinho";
}

<****!****>

@section Scrips
{
    <script type="text/javascript">
        function clickIncremento(btn) { 
            var linhaDoItem = $(btn).parents('[item-id]');
            var itemId = $(linhaDoItem).attr('idem-id');
            var novaQtde = $(linhaDoItem).find('input').val();

                        var data = {
                            Id: itemId,
                            Quantidade: novaQtde
                        };

                        $.ajax({
                            url:'/pedido/updatequantidade',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(data)
                        });

                        debugger;
        }
    </script>
Executaremos a aplicação para averiguar se tudo opera como o esperado. Entraremos na página de compras e escolheremos um produto qualquer e clicaremos no botão "Adicionar".

produto qualquer - página com três opções de livros de programação, cada um deles com o botão "Adicionar" posicionado abaixo da capa.
Voltaremos para a página do carrinho e clicaremos sobre o botão "+", como de costume. Seremos redirecionados para o código de PedidoController e poderemos investigar o parâmetro que foi recebido pelo método UpdateQuantidade(). O resultado foi :

id: 7009
Pedido: null
PrecoUnitario: 0
Produto: null
Quantidade: 0 
A Quantidade não foi passada, precisamos descobrir a causa. Iremos até a classe itemPedido averiguar o que pode ter acontecido. O que foi passaod para o servidor foi apenas o Id, mas essa informação não se encontra na classe, e sim em BaseModel.

public class ItemPedido: BaseModel
{ 
    [Required]
    public Pedido Pedido { get; private set; }
    [Required]
    public Produto Produto { get; private set; }
    [Required] 
    public int Quantidade {get; private set; }
    [Required]
    public decimal PrecoUnitario { get; private set; }

<****!****> 
Ao investigarmos a classe BaseModel, perceberemos que ela possui o Id anotado com o atributo DataMember. Além disso, há também o atributo DataContract. Nós só conseguimos passar o Id porque tanto a classe BaseModel como a propriedade Id estão marcadas com atributos que permitem a sua seralização. Como recebemos uma string a partir do corpo da requisição, tal string pôde ser convertida corretamente em objeto. Em ItemPedido não conseguimos realizar o mesmo procedimento, precisamos anotar tanto a classe quanto as propriedades ItemPedido com os atributos.

namespace CasaDoCodigo.Models
{
    [DataContract]
    public abstract class BaseModel
    {
        [DataMember]
        pubic int Id { get; protected set; }

    } 

<****!****>
Navegaremos até a classe ItemPedido e coemçaremos a anotar com o atributo DataContract, depois, para cada propriedade do pedido marcaremos como DataMember.

[DataContract]
public class ItemPedido: BaseModel
{ 
    [Required]
    [DataMember]
    public Pedido Pedido { get; private set; }
    [Required]
    [DataMember]
    public Produto Produto { get; private set; }
    [Required] 
    [DataMember]
    public int Quantidade {get; private set; }
    [Required]
    [DataMember]
    public decimal PrecoUnitario { get; private set; }

<****!****> 
Executaremos a aplicação, e na página carrossel escolheremos um novo produto, seremos direcionados para a página de carrinho e clicaremos sobre o botão "+" para aumentar a quantidade de itens. Feito isso, conseguimos ver as informações passadas para ItemPedido:

Id : 8009
Pedido : null
PrecoUnitario : 0
Produto : null
Quantidade : 1
Temos a Quantidade com valor 1, obtido por meio do código JavaScript. Continuaremos nosso projeto e veremos como essas informações serão utilizadas na aplicação.











